#!/usr/bin/env python3
"""
Pruebas Simplificadas para Componentes RAG Avanzados
===================================================

Suite de pruebas b√°sicas para validar la funcionalidad core de los componentes RAG
sin dependencias externas complejas.
"""

import asyncio
import numpy as np
from datetime import datetime
import sys
import os
from pathlib import Path

# Agregar vigia_detect al path
sys.path.insert(0, str(Path(__file__).parent))


        
    except Exception as e:
        print(f"‚ùå Error en clustering b√°sico: {e}")
        return False


def test_explainability_basic():
    """Test b√°sico del servicio de explicabilidad m√©dica."""
    try:
        print("üí° Probando Medical Explainability Service (b√°sico)...")
        
        # Importar clases b√°sicas
        from vigia_detect.rag.medical_explainability_service import (
            MedicalExplainabilityService, ExplanationType, EvidenceLevel, EvidenceSource
        )
        
        # Test creaci√≥n de fuente de evidencia
        evidence_source = EvidenceSource(
            source_id="source_001",
            source_type="clinical_guideline",
            title="Gu√≠a NPUAP 2019",
            content="Protocolo para LPP grado 2",
            evidence_level=EvidenceLevel.LEVEL_A,
            confidence_score=0.9,
            relevance_score=0.85,
            publication_date=datetime.now(),
            medical_specialty="wound_care",
            jurisdiction="international",
            keywords=["LPP", "pressure", "injury"]
        )
        
        assert evidence_source.source_id == "source_001"
        assert evidence_source.evidence_level == EvidenceLevel.LEVEL_A
        
        # Test tipos de explicaci√≥n
        assert ExplanationType.SOURCE_ATTRIBUTION.value == "source_attribution"
        assert ExplanationType.SIMILARITY_ANALYSIS.value == "similarity_analysis"
        
        print("‚úÖ Medical Explainability Service b√°sico funcionando")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en explainability b√°sico: {e}")
        return False


def test_medclip_basic():
    """Test b√°sico del servicio multimodal MedCLIP."""
    try:
        print("üìä Probando MedCLIP Multimodal Service (b√°sico)...")
        
        # Importar clase b√°sica
        from vigia_detect.rag.multimodal_medclip_service import MedCLIPMultimodalService
        
        # Test creaci√≥n de instancia
        service = MedCLIPMultimodalService()
        assert service.embedding_dimension == 768
        assert service.device is not None
        
        # Test conceptos m√©dicos
        medical_concepts = service._load_medical_concepts()
        assert 'lpp' in medical_concepts
        assert 'wound' in medical_concepts
        
        # Test enhancement de texto m√©dico
        enhanced_text = service._enhance_medical_text(
            "Paciente con √∫lcera",
            {'lpp_grade': 2, 'anatomical_location': 'sacro'}
        )
        assert "Grado 2" in enhanced_text
        assert "sacro" in enhanced_text
        
        print("‚úÖ MedCLIP Multimodal Service b√°sico funcionando")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en MedCLIP b√°sico: {e}")
        return False


def test_advanced_rag_integration_basic():
    """Test b√°sico de la integraci√≥n RAG avanzada."""
    try:
        print("üöÄ Probando Advanced RAG Integration (b√°sico)...")
        
        # Importar clase b√°sica
        from vigia_detect.rag.advanced_rag_integration import AdvancedRAGOrchestrator
        
        # Test creaci√≥n de instancia
        orchestrator = AdvancedRAGOrchestrator()
        assert not orchestrator.is_initialized
        assert len(orchestrator.capabilities) == 4
        
        # Test capacidades esperadas
        expected_capabilities = [
            'multimodal_search',
            'dynamic_clustering', 
            'incremental_learning',
            'explainable_recommendations'
        ]
        
        for capability in expected_capabilities:
            assert capability in orchestrator.capabilities
        
        # Test m√©tricas iniciales
        assert orchestrator.metrics['total_queries_processed'] == 0
        assert orchestrator.metrics['multimodal_queries'] == 0
        
        print("‚úÖ Advanced RAG Integration b√°sico funcionando")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en RAG integration b√°sico: {e}")
        return False


async def test_async_functionality():
    """Test funcionalidad as√≠ncrona b√°sica."""
    try:
        print("‚ö° Probando funcionalidad as√≠ncrona...")
        
        # Test funci√≥n factory as√≠ncrona
        from vigia_detect.rag.advanced_rag_integration import create_advanced_rag_orchestrator, AdvancedRAGOrchestrator
        
        # Crear orquestador (sin inicializaci√≥n completa)
        orchestrator = AdvancedRAGOrchestrator()
        
        # Test m√©todo as√≠ncrono b√°sico
        status = await orchestrator.get_orchestrator_status()
        assert isinstance(status, dict)
        assert 'is_initialized' in status
        
        print("‚úÖ Funcionalidad as√≠ncrona b√°sica funcionando")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en funcionalidad as√≠ncrona: {e}")
        return False


def run_basic_rag_tests():
    """Ejecutar todas las pruebas b√°sicas de componentes RAG."""
    print("üß™ Iniciando pruebas b√°sicas de componentes RAG avanzados...\n")
    
    results = []
    
    # Pruebas s√≠ncronas
    results.append(test_incremental_training_basic())
    results.append(test_clustering_basic())
    results.append(test_explainability_basic())
    results.append(test_medclip_basic())
    results.append(test_advanced_rag_integration_basic())
    
    return results


async def run_async_tests():
    """Ejecutar pruebas as√≠ncronas."""
    print("\n‚ö° Ejecutando pruebas as√≠ncronas...")
    result = await test_async_functionality()
    return [result]


def main():
    """Funci√≥n principal."""
    # Pruebas s√≠ncronas
    sync_results = run_basic_rag_tests()
    
    # Pruebas as√≠ncronas
    async_results = asyncio.run(run_async_tests())
    
    # Combinar resultados
    all_results = sync_results + async_results
    
    # Resumen de resultados
    print("\n" + "="*60)
    print("üìã RESUMEN DE PRUEBAS RAG B√ÅSICAS")
    print("="*60)
    
    passed = sum(all_results)
    total = len(all_results)
    
    print(f"‚úÖ Pruebas exitosas: {passed}/{total}")
    print(f"‚ùå Pruebas fallidas: {total - passed}/{total}")
    print(f"üìä Tasa de √©xito: {(passed/total)*100:.1f}%")
    
    component_status = {
        "Incremental Training": sync_results[0],
        "Dynamic Clustering": sync_results[1], 
        "Medical Explainability": sync_results[2],
        "MedCLIP Multimodal": sync_results[3],
        "Advanced RAG Integration": sync_results[4],
        "Async Functionality": async_results[0]
    }
    
    print("\nüìä Estado por componente:")
    for component, status in component_status.items():
        status_icon = "‚úÖ" if status else "‚ùå"
        print(f"  {status_icon} {component}")
    
    if passed == total:
        print("\nüéâ ¬°Todas las pruebas b√°sicas RAG pasaron exitosamente!")
        print("üöÄ Componentes core implementados correctamente")
        print("üí° Sistema listo para pruebas de integraci√≥n completa")
    else:
        print(f"\n‚ö†Ô∏è {total - passed} pruebas fallaron - revisar implementaci√≥n")
        print("üîß Algunos componentes necesitan ajustes")
    
    return passed == total


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)