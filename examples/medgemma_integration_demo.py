#!/usr/bin/env python3
"""
Demo de integraci√≥n MedGemma en Vigia
Ejemplo de uso del sistema de triage mejorado con an√°lisis m√©dico AI.
"""

import asyncio
import sys
import os
from datetime import datetime
from pathlib import Path

# Agregar path del proyecto
sys.path.append(str(Path(__file__).parent.parent))

from vigia_detect.core.triage_engine import MedicalTriageEngine
from vigia_detect.core.input_packager import InputPackager, InputType
from vigia_detect.ai.medgemma_client import MedicalContext
from config.settings import get_settings

settings = get_settings()


async def demo_basic_triage():
    """Demo del triage b√°sico (sin MedGemma)"""
    print("üîç DEMO: Triage B√°sico (Reglas + Patrones)")
    print("=" * 50)
    
    # Inicializar motor de triage b√°sico
    triage_engine = MedicalTriageEngine(use_medgemma=False)
    
    # Crear input estandarizado
    packager = InputPackager()
    
    input_data = {
        "text": "Hola doctora, tengo una √∫lcera en el tal√≥n que me duele mucho y est√° sangrando un poco. ¬øEs grave?",
        "session_id": "demo-basic-001",
        "timestamp": datetime.now(),
        "source": "whatsapp"
    }
    
    standardized_input = await packager.package_input(
        input_data, InputType.TEXT_MESSAGE
    )
    
    # Realizar triage b√°sico
    result = await triage_engine.perform_triage(standardized_input)
    
    print(f"‚úÖ Resultado del Triage B√°sico:")
    print(f"   Urgencia: {result.urgency.value}")
    print(f"   Contexto: {result.context.value}")
    print(f"   Confianza: {result.confidence:.2f}")
    print(f"   Reglas aplicadas: {result.matched_rules}")
    print(f"   Ruta recomendada: {result.recommended_route}")
    print(f"   Flags cl√≠nicos: {result.clinical_flags}")
    print(f"   Requiere revisi√≥n humana: {result.requires_human_review}")
    print(f"   Explicaci√≥n: {result.explanation}")
    print()


async def demo_enhanced_triage():
    """Demo del triage mejorado con MedGemma"""
    print("üß† DEMO: Triage Mejorado (MedGemma + IA M√©dica)")
    print("=" * 50)
    
    # Verificar si MedGemma est√° habilitado
    if not settings.medgemma_enabled:
        print("‚ö†Ô∏è  MedGemma no est√° habilitado en la configuraci√≥n.")
        print("   Para habilitar, configura: MEDGEMMA_ENABLED=true")
        print("   Y configura tu GOOGLE_API_KEY")
        return
    
    # Inicializar motor de triage mejorado
    triage_engine = MedicalTriageEngine(use_medgemma=True)
    
    # Crear input estandarizado con contexto m√©dico
    packager = InputPackager()
    
    input_data = {
        "text": "Doctora, mi abuela de 85 a√±os tiene una lesi√≥n en el coxis que empez√≥ como una mancha roja y ahora tiene una abertura profunda. Est√° postrada en cama desde hace 3 meses por fractura de cadera. Le duele mucho cuando la movemos y hoy not√© que huele mal. ¬øDebo llevarla al hospital?",
        "session_id": "demo-enhanced-001", 
        "timestamp": datetime.now(),
        "source": "whatsapp",
        "metadata": {
            "patient_age": 85,
            "medical_history": ["fractura_cadera", "inmovilidad_prolongada"],
            "mobility_status": "postrada_en_cama",
            "risk_factors": ["edad_avanzada", "inmovilidad", "fractura_reciente"],
            "has_media": False
        }
    }
    
    standardized_input = await packager.package_input(
        input_data, InputType.TEXT_MESSAGE
    )
    
    # Realizar triage mejorado
    print("üîÑ Procesando con MedGemma...")
    result = await triage_engine.perform_enhanced_triage(standardized_input)
    
    print(f"‚úÖ Resultado del Triage Mejorado:")
    print(f"   Urgencia: {result.urgency.value}")
    print(f"   Contexto: {result.context.value}")
    print(f"   Confianza: {result.confidence:.2f}")
    print(f"   Reglas aplicadas: {result.matched_rules}")
    print(f"   Ruta recomendada: {result.recommended_route}")
    print(f"   Flags cl√≠nicos: {result.clinical_flags}")
    print(f"   Requiere revisi√≥n humana: {result.requires_human_review}")
    print(f"   Explicaci√≥n: {result.explanation}")
    
    # Mostrar metadata de MedGemma si est√° disponible
    if result.metadata and "medgemma_analysis" in result.metadata:
        medgemma_data = result.metadata["medgemma_analysis"]
        print(f"\nüß† An√°lisis MedGemma:")
        print(f"   Nivel de urgencia: {medgemma_data.get('urgency_level')}")
        print(f"   Disposici√≥n: {medgemma_data.get('disposition')}")
        print(f"   Confianza MedGemma: {medgemma_data.get('confidence', 0):.2f}")
        print(f"   Razonamiento cl√≠nico: {medgemma_data.get('clinical_reasoning', 'No disponible')}")
    
    print()


async def demo_lpp_analysis():
    """Demo de an√°lisis espec√≠fico de LPP con MedGemma"""
    print("ü©∫ DEMO: An√°lisis LPP Especializado")
    print("=" * 50)
    
    if not settings.medgemma_enabled:
        print("‚ö†Ô∏è  MedGemma no est√° habilitado en la configuraci√≥n.")
        return
    
    try:
        from vigia_detect.ai.medgemma_client import MedGemmaClient, MedicalContext
        
        # Inicializar cliente MedGemma
        medgemma_client = MedGemmaClient()
        
        # Contexto m√©dico del paciente
        medical_context = MedicalContext(
            patient_age=78,
            medical_history=["diabetes_tipo2", "insuficiencia_cardiaca"],
            current_medications=["metformina", "enalapril", "furosemida"],
            mobility_status="ambulatorio_limitado",
            risk_factors=["diabetes", "edad_avanzada", "edema"],
            previous_lpp_history=False
        )
        
        # Observaciones cl√≠nicas
        clinical_observations = """
        Paciente de 78 a√±os con lesi√≥n en regi√≥n sacra de aproximadamente 3 cm de di√°metro.
        La lesi√≥n presenta p√©rdida de espesor completo de la piel con exposici√≥n del tejido subcut√°neo.
        Bordes bien definidos, lecho de la herida con tejido de granulaci√≥n rojo y peque√±as √°reas de esfacelo.
        Exudado seroso moderado, sin mal olor. Piel circundante eritematosa pero sin induraci√≥n.
        Paciente refiere dolor 6/10 durante la limpieza, mejora con analg√©sicos.
        """
        
        # Hallazgos visuales simulados (del pipeline de CV)
        visual_findings = {
            "detections": ["lesion_sacra"],
            "features": {
                "diameter_cm": 3.2,
                "depth": "full_thickness",
                "tissue_type": "granulation_with_slough"
            },
            "confidence": 0.87
        }
        
        print("üîÑ Analizando hallazgos de LPP con MedGemma...")
        
        # Realizar an√°lisis de LPP
        lpp_analysis = await medgemma_client.analyze_lpp_findings(
            clinical_observations=clinical_observations,
            visual_findings=visual_findings,
            medical_context=medical_context
        )
        
        if lpp_analysis:
            print(f"‚úÖ An√°lisis de LPP completado:")
            print(f"   Tipo de an√°lisis: {lpp_analysis.analysis_type.value}")
            print(f"   Confianza: {lpp_analysis.confidence_score:.2f}")
            print(f"   Nivel de riesgo: {lpp_analysis.risk_level}")
            print(f"   Seguimiento necesario: {lpp_analysis.follow_up_needed}")
            
            print(f"\nüìã Hallazgos cl√≠nicos:")
            for key, value in lpp_analysis.clinical_findings.items():
                print(f"   {key}: {value}")
            
            print(f"\nüí° Recomendaciones:")
            for rec in lpp_analysis.recommendations:
                print(f"   ‚Ä¢ {rec}")
            
            if lpp_analysis.audit_trail:
                print(f"\nüìù Informaci√≥n de auditor√≠a:")
                for key, value in lpp_analysis.audit_trail.items():
                    print(f"   {key}: {value}")
        else:
            print("‚ùå No se pudo completar el an√°lisis de LPP")
            
    except Exception as e:
        print(f"‚ùå Error en el an√°lisis LPP: {e}")
    
    print()


async def demo_comparison():
    """Demo comparativo: Triage b√°sico vs mejorado"""
    print("‚öñÔ∏è  DEMO: Comparaci√≥n Triage B√°sico vs Mejorado")
    print("=" * 50)
    
    # Caso cl√≠nico complejo
    complex_case = {
        "text": "Doctor, soy enfermera en un hogar de ancianos. Tengo un paciente de 92 a√±os con demencia que desarroll√≥ una lesi√≥n profunda en el tal√≥n derecho. La lesi√≥n tiene tejido negro en el centro y est√° sangrando. El paciente no puede comunicar dolor pero se agita cuando tocamos el √°rea. Tiene antecedentes de diabetes y problemas circulatorios. ¬øQu√© tan urgente es esto?",
        "session_id": "demo-comparison-001",
        "timestamp": datetime.now(),
        "source": "whatsapp",
        "metadata": {
            "patient_age": 92,
            "medical_history": ["demencia", "diabetes", "enfermedad_vascular_periferica"],
            "mobility_status": "postrado",
            "risk_factors": ["edad_muy_avanzada", "diabetes", "inmovilidad", "demencia"],
            "previous_lpp_history": True,
            "has_media": False
        }
    }
    
    packager = InputPackager()
    standardized_input = await packager.package_input(
        complex_case, InputType.TEXT_MESSAGE
    )
    
    # Triage b√°sico
    print("üîç Triage B√°sico:")
    basic_engine = MedicalTriageEngine(use_medgemma=False)
    basic_result = await basic_engine.perform_triage(standardized_input)
    
    print(f"   Urgencia: {basic_result.urgency.value}")
    print(f"   Confianza: {basic_result.confidence:.2f}")
    print(f"   Ruta: {basic_result.recommended_route}")
    print(f"   Humano requerido: {basic_result.requires_human_review}")
    
    # Triage mejorado (si est√° disponible)
    if settings.medgemma_enabled:
        print("\nüß† Triage Mejorado con MedGemma:")
        enhanced_engine = MedicalTriageEngine(use_medgemma=True)
        enhanced_result = await enhanced_engine.perform_enhanced_triage(standardized_input)
        
        print(f"   Urgencia: {enhanced_result.urgency.value}")
        print(f"   Confianza: {enhanced_result.confidence:.2f}")
        print(f"   Ruta: {enhanced_result.recommended_route}")
        print(f"   Humano requerido: {enhanced_result.requires_human_review}")
        
        # Comparaci√≥n
        print(f"\nüìä Diferencias:")
        print(f"   Mejora en confianza: {enhanced_result.confidence - basic_result.confidence:.2f}")
        print(f"   Cambio de urgencia: {basic_result.urgency.value} ‚Üí {enhanced_result.urgency.value}")
        
        if enhanced_result.metadata and "medgemma_analysis" in enhanced_result.metadata:
            print(f"   An√°lisis MedGemma disponible: ‚úÖ")
        else:
            print(f"   An√°lisis MedGemma disponible: ‚ùå")
    else:
        print("\n‚ö†Ô∏è  Triage mejorado no disponible (MedGemma no configurado)")
    
    print()


async def main():
    """Funci√≥n principal del demo"""
    print("üè• VIGIA - DEMO INTEGRACI√ìN MEDGEMMA")
    print("=" * 60)
    print(f"Configuraci√≥n actual:")
    print(f"   MedGemma habilitado: {settings.medgemma_enabled}")
    print(f"   Modelo MedGemma: {settings.medgemma_model}")
    print(f"   Google Cloud Project: {settings.google_cloud_project}")
    print()
    
    try:
        # Ejecutar demos
        await demo_basic_triage()
        await demo_enhanced_triage()
        await demo_lpp_analysis()
        await demo_comparison()
        
        print("‚úÖ Demo completado exitosamente")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Demo interrumpido por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error durante el demo: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    # Configurar logging b√°sico
    import logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # Ejecutar demo
    asyncio.run(main())