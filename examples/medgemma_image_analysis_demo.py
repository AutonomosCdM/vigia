#!/usr/bin/env python3
"""
Demo de An√°lisis de Im√°genes M√©dicas con MedGemma via Ollama
Demuestra el an√°lisis multimodal de im√°genes m√©dicas usando MedGemma.
"""

import asyncio
import base64
import sys
from pathlib import Path
from typing import Optional

# Agregar path del proyecto
sys.path.append(str(Path(__file__).parent.parent))

import subprocess
import tempfile
from PIL import Image, ImageDraw, ImageFont


class MedGemmaImageAnalysisDemo:
    """Demo de an√°lisis de im√°genes m√©dicas con MedGemma."""
    
    def __init__(self):
        self.model_name = "alibayram/medgemma"
    
    def check_ollama_available(self) -> bool:
        """Verificar si Ollama est√° disponible."""
        try:
            result = subprocess.run(["ollama", "--version"], 
                                  capture_output=True, text=True)
            return result.returncode == 0
        except FileNotFoundError:
            return False
    
    def check_model_installed(self) -> bool:
        """Verificar si el modelo est√° instalado."""
        try:
            result = subprocess.run(["ollama", "list"], 
                                  capture_output=True, text=True)
            return self.model_name in result.stdout
        except Exception:
            return False
    
    def create_sample_medical_image(self) -> str:
        """Crear imagen m√©dica de muestra para demostraci√≥n."""
        # Crear imagen de 400x300 con fondo blanco
        img = Image.new('RGB', (400, 300), color='white')
        draw = ImageDraw.Draw(img)
        
        # Simular una lesi√≥n por presi√≥n
        # √Årea rojiza en regi√≥n sacra
        draw.ellipse([150, 120, 250, 180], fill='#FF6B6B', outline='#FF4757')
        
        # √Årea m√°s oscura en el centro (simulando grado 2)
        draw.ellipse([175, 135, 225, 165], fill='#A5282C', outline='#7F1D1D')
        
        # Texto descriptivo
        try:
            # Intentar usar una fuente m√°s grande
            font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 16)
        except:
            # Usar fuente por defecto si no encuentra Arial
            font = ImageFont.load_default()
        
        draw.text((10, 10), "Imagen de Demostraci√≥n", fill='black', font=font)
        draw.text((10, 30), "Posible LPP Grado 2", fill='black', font=font)
        draw.text((10, 50), "Regi√≥n Sacra", fill='black', font=font)
        
        # Guardar imagen temporal
        temp_file = tempfile.NamedTemporaryFile(suffix='.png', delete=False)
        img.save(temp_file.name)
        
        return temp_file.name
    
    def analyze_image_with_ollama(self, image_path: str, prompt: str) -> str:
        """Analizar imagen usando Ollama con MedGemma."""
        try:
            # Comando para Ollama con imagen
            # Nota: alibayram/medgemma puede no soportar im√°genes directamente
            # Usaremos el modelo para an√°lisis de texto sobre descripci√≥n
            
            # Leer y describir la imagen primero
            img_description = self.describe_image_basic(image_path)
            
            # Crear prompt combinado
            combined_prompt = f"""
Analiza esta imagen m√©dica bas√°ndote en la siguiente descripci√≥n:

Descripci√≥n de la imagen: {img_description}

Pregunta m√©dica: {prompt}

Proporciona un an√°lisis m√©dico profesional considerando:
1. Posible diagn√≥stico
2. Grado de severidad
3. Recomendaciones de tratamiento
4. Se√±ales de alarma
5. Seguimiento necesario
"""
            
            # Ejecutar an√°lisis con Ollama
            result = subprocess.run([
                "ollama", "run", self.model_name, combined_prompt
            ], capture_output=True, text=True, timeout=60)
            
            if result.returncode == 0:
                return result.stdout.strip()
            else:
                return f"Error en an√°lisis: {result.stderr}"
                
        except subprocess.TimeoutExpired:
            return "Error: Tiempo de an√°lisis agotado"
        except Exception as e:
            return f"Error ejecutando an√°lisis: {e}"
    
    def describe_image_basic(self, image_path: str) -> str:
        """Descripci√≥n b√°sica de la imagen usando an√°lisis de p√≠xeles."""
        try:
            img = Image.open(image_path)
            width, height = img.size
            
            # Analizar colores dominantes
            colors = img.getcolors(maxcolors=256*256*256)
            if colors:
                # Ordenar por frecuencia
                colors.sort(reverse=True)
                dominant_colors = colors[:5]
                
                color_desc = []
                for count, color in dominant_colors:
                    if isinstance(color, tuple) and len(color) == 3:
                        r, g, b = color
                        if r > 200 and g < 100 and b < 100:
                            color_desc.append("√°rea rojiza")
                        elif r > 150 and g < 150 and b < 150:
                            color_desc.append("√°rea rosada")
                        elif r < 100 and g < 100 and b < 100:
                            color_desc.append("√°rea oscura")
                        elif r > 200 and g > 200 and b > 200:
                            color_desc.append("√°rea clara/piel normal")
            
            description = f"Imagen m√©dica de {width}x{height} p√≠xeles. "
            if color_desc:
                description += f"Se observan: {', '.join(set(color_desc))}. "
            
            description += "Posible lesi√≥n cut√°nea con cambios de coloraci√≥n que sugieren lesi√≥n por presi√≥n."
            
            return description
            
        except Exception as e:
            return f"Imagen m√©dica con posibles hallazgos patol√≥gicos. Error en an√°lisis detallado: {e}"
    
    async def run_demo(self):
        """Ejecutar demostraci√≥n completa."""
        print("üî¨ Demo de An√°lisis de Im√°genes M√©dicas con MedGemma")
        print("=" * 60)
        
        # Verificar requisitos
        if not self.check_ollama_available():
            print("‚ùå Ollama no est√° disponible. Instalar con:")
            print("   python scripts/setup_medgemma_ollama.py --install-ollama")
            return
        
        if not self.check_model_installed():
            print("‚ùå Modelo MedGemma no est√° instalado. Instalar con:")
            print(f"   python scripts/setup_medgemma_ollama.py --model 4b --install")
            return
        
        print("‚úÖ Requisitos verificados")
        
        # Crear imagen de muestra
        print("\nüì∏ Creando imagen m√©dica de demostraci√≥n...")
        sample_image = self.create_sample_medical_image()
        print(f"   Imagen creada: {sample_image}")
        
        # Casos de an√°lisis
        test_cases = [
            {
                "prompt": "¬øQu√© tipo de lesi√≥n observas en esta imagen? Describe el grado de severidad.",
                "description": "An√°lisis de tipo y grado de lesi√≥n"
            },
            {
                "prompt": "¬øCu√°les son las recomendaciones de tratamiento para esta lesi√≥n por presi√≥n?",
                "description": "Recomendaciones terap√©uticas"
            },
            {
                "prompt": "¬øQu√© signos de alarma debo buscar en el seguimiento de esta lesi√≥n?",
                "description": "Signos de alarma y seguimiento"
            }
        ]
        
        # Ejecutar an√°lisis
        for i, case in enumerate(test_cases, 1):
            print(f"\nüîç CASO {i}: {case['description']}")
            print("-" * 50)
            print(f"Consulta: {case['prompt']}")
            print("\nü§ñ An√°lisis de MedGemma:")
            print("-" * 30)
            
            # An√°lisis con timeout visual
            print("‚è≥ Analizando imagen...")
            analysis = self.analyze_image_with_ollama(sample_image, case['prompt'])
            
            print(analysis)
            print("\n" + "=" * 50)
        
        # Estad√≠sticas finales
        print("\nüìä Resumen de la Demostraci√≥n")
        print("-" * 40)
        print(f"‚úÖ Imagen analizada: {Path(sample_image).name}")
        print(f"‚úÖ Modelo utilizado: {self.model_name}")
        print(f"‚úÖ Casos analizados: {len(test_cases)}")
        print(f"‚úÖ An√°lisis completado exitosamente")
        
        # Limpiar archivo temporal
        try:
            Path(sample_image).unlink()
            print(f"üßπ Archivo temporal eliminado")
        except:
            print(f"‚ö†Ô∏è No se pudo eliminar: {sample_image}")
        
        print("\nüí° Nota importante:")
        print("   Este es un demo con imagen sint√©tica.")
        print("   Para uso cl√≠nico real, se requiere:")
        print("   - Validaci√≥n m√©dica profesional")
        print("   - Modelos especializados en dermatolog√≠a")
        print("   - Supervisi√≥n de personal calificado")


async def main():
    """Funci√≥n principal."""
    demo = MedGemmaImageAnalysisDemo()
    await demo.run_demo()


if __name__ == "__main__":
    print("üî¨ Iniciando demo de an√°lisis de im√°genes m√©dicas...")
    print("Presiona Ctrl+C para interrumpir\n")
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Demo interrumpida por usuario")
    except Exception as e:
        print(f"\n‚ùå Error en demo: {e}")