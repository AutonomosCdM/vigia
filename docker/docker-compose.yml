version: '3.8'

services:
  # Main Vigia detection service
  vigia:
    build: .
    container_name: vigia-detector${CONTAINER_SUFFIX:-}
    environment:
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - WEBHOOK_ENABLED=${WEBHOOK_ENABLED:-false}
      - WEBHOOK_URL=${WEBHOOK_URL}
      - WEBHOOK_API_KEY=${WEBHOOK_API_KEY}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - RATE_LIMIT_ENABLED=${RATE_LIMIT_ENABLED:-false}
      - RATE_LIMIT_PER_MINUTE=${RATE_LIMIT_PER_MINUTE:-60}
    volumes:
      - vigia-input:/app/data/input
      - vigia-output:/app/data/output
      - ./logs:/app/logs
    depends_on:
      - redis
    networks:
      - vigia-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp
      - /app/temp

  # WhatsApp bot service
  whatsapp:
    build: .
    container_name: vigia-whatsapp
    command: ["python", "-m", "vigia_detect.messaging.whatsapp.server"]
    environment:
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_WHATSAPP_FROM=${TWILIO_WHATSAPP_FROM}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
    ports:
      - "5000:5000"
    depends_on:
      - redis
    networks:
      - vigia-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /tmp
      - /app/temp

  # Slack bot service
  slack:
    build: .
    container_name: vigia-slack
    command: ["python", "apps/slack_server.py"]
    environment:
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - SLACK_APP_TOKEN=${SLACK_APP_TOKEN}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
    depends_on:
      - redis
    networks:
      - vigia-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp

  # Webhook server
  webhook-server:
    build: .
    container_name: vigia-webhook
    command: ["python", "-m", "vigia_detect.webhook.server"]
    environment:
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
    ports:
      - "8000:8000"
    depends_on:
      - redis
    networks:
      - vigia-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /tmp

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: vigia-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - vigia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: vigia-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - vigia-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: vigia-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    ports:
      - "3000:3000"
    networks:
      - vigia-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  vigia-input:
  vigia-output:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  vigia-network:
    driver: bridge