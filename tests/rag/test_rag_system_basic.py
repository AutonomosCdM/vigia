#!/usr/bin/env python3
"""
Pruebas Simplificadas para Componentes RAG Avanzados
===================================================

Suite de pruebas b√°sicas para validar la funcionalidad core de los componentes RAG
sin dependencias externas complejas.
"""

import asyncio
import numpy as np
from datetime import datetime
import sys
import os
from pathlib import Path
import pytest

# Agregar vigia_detect al path
sys.path.insert(0, str(Path(__file__).parent))


def test_incremental_training_basic():
    """Test b√°sico del pipeline de entrenamiento incremental."""
    try:
        print("üéØ Probando Incremental Training Pipeline (b√°sico)...")
        
        # Importar y crear instancia b√°sica
        from vigia_detect.rag.incremental_training_pipeline import (
            IncrementalTrainingPipeline, TrainingDataType, ValidationStatus, MedicalTrainingData
        )
        
        # Test creaci√≥n de instancia
        pipeline = IncrementalTrainingPipeline(min_batch_size=2)
        assert pipeline.min_batch_size == 2
        assert pipeline.validation_threshold == 0.8
        
        # Test creaci√≥n de datos de entrenamiento
        training_data = MedicalTrainingData(
            data_id="test_001",
            data_type=TrainingDataType.QUERY_RESPONSE_PAIR,
            query_text="Paciente con LPP grado 2",
            target_text="Protocolo de cuidados est√°ndar",
            similarity_score=None,
            medical_classification=None,
            patient_outcome=None,
            validation_status=ValidationStatus.PENDING,
            medical_context={'lpp_grade': 2},
            created_at=datetime.now(),
            validated_at=None,
            validator_id=None
        )
        
        assert training_data.data_id == "test_001"
        assert training_data.data_type == TrainingDataType.QUERY_RESPONSE_PAIR
        
        print("‚úÖ Incremental Training Pipeline b√°sico funcionando")
        
    except Exception as e:
        print(f"‚ùå Error en incremental training b√°sico: {e}")
        pytest.fail(f"Incremental training basic test failed: {e}")


def test_clustering_basic():
    """Test b√°sico del servicio de clustering din√°mico."""
    try:
        print("üîç Probando Dynamic Clustering Service (b√°sico)...")
        
        # Importar clases b√°sicas
        from vigia_detect.rag.dynamic_clustering_service import (
            DynamicMedicalClusteringService, ClusterType, MedicalQuery
        )
        
        # Test creaci√≥n de instancia (modo b√°sico)
        service = DynamicMedicalClusteringService(min_cluster_size=2)
        assert service.min_cluster_size == 2
        assert service.similarity_threshold == 0.8
        
        # Test creaci√≥n de consulta m√©dica
        medical_query = MedicalQuery(
            query_id="query_001",
            query_text="√ölcera por presi√≥n en tal√≥n",
            lpp_grade=2,
            anatomical_location="talon",
            patient_context={'age': 70},
            timestamp=datetime.now(),
            jurisdiction="chile",
            embedding=np.random.rand(768),
            cluster_id=None
        )
        
        assert medical_query.query_id == "query_001"
        assert medical_query.lpp_grade == 2
        
        # Test tipos de cluster
        assert ClusterType.SIMILAR_SYMPTOMS.value == "similar_symptoms"
        assert ClusterType.TREATMENT_PATTERNS.value == "treatment_patterns"
        
        print("‚úÖ Dynamic Clustering Service b√°sico funcionando")
        
    except Exception as e:
        print(f"‚ùå Error en clustering b√°sico: {e}")
        pytest.fail(f"Dynamic clustering basic test failed: {e}")


def test_explainability_basic():
    """Test b√°sico del servicio de explicabilidad m√©dica."""
    try:
        print("üí° Probando Medical Explainability Service (b√°sico)...")
        
        # Importar clases b√°sicas
        from vigia_detect.rag.medical_explainability_service import (
            MedicalExplainabilityService, ExplanationType, EvidenceLevel, EvidenceSource
        )
        
        # Test creaci√≥n de fuente de evidencia
        evidence_source = EvidenceSource(
            source_id="source_001",
            source_type="clinical_guideline",
            title="Gu√≠a NPUAP 2019",
            content="Protocolo para LPP grado 2",
            evidence_level=EvidenceLevel.LEVEL_A,
            confidence_score=0.9,
            relevance_score=0.85,
            publication_date=datetime.now(),
            medical_specialty="wound_care",
            jurisdiction="international",
            keywords=["LPP", "pressure", "injury"]
        )
        
        assert evidence_source.source_id == "source_001"
        assert evidence_source.evidence_level == EvidenceLevel.LEVEL_A
        
        # Test tipos de explicaci√≥n
        assert ExplanationType.SOURCE_ATTRIBUTION.value == "source_attribution"
        assert ExplanationType.SIMILARITY_ANALYSIS.value == "similarity_analysis"
        
        print("‚úÖ Medical Explainability Service b√°sico funcionando")
        
    except Exception as e:
        print(f"‚ùå Error en explainability b√°sico: {e}")
        pytest.fail(f"Medical explainability basic test failed: {e}")


def test_medclip_basic():
    """Test b√°sico del servicio multimodal MedCLIP."""
    try:
        print("üìä Probando MedCLIP Multimodal Service (b√°sico)...")
        
        # Importar clase b√°sica
        from vigia_detect.rag.multimodal_medclip_service import MedCLIPMultimodalService
        
        # Test creaci√≥n de instancia
        service = MedCLIPMultimodalService()
        assert service.embedding_dimension == 768
        assert service.device is not None
        
        # Test conceptos m√©dicos
        medical_concepts = service._load_medical_concepts()
        assert 'lpp' in medical_concepts
        assert 'wound' in medical_concepts
        
        # Test enhancement de texto m√©dico
        enhanced_text = service._enhance_medical_text(
            "Paciente con √∫lcera",
            {'lpp_grade': 2, 'anatomical_location': 'sacro'}
        )
        assert "Grado 2" in enhanced_text
        assert "sacro" in enhanced_text
        
        print("‚úÖ MedCLIP Multimodal Service b√°sico funcionando")
        
    except Exception as e:
        print(f"‚ùå Error en MedCLIP b√°sico: {e}")
        pytest.fail(f"MedCLIP basic test failed: {e}")


def test_advanced_rag_integration_basic():
    """Test b√°sico de la integraci√≥n RAG avanzada."""
    try:
        print("üöÄ Probando Advanced RAG Integration (b√°sico)...")
        
        # Importar clase b√°sica
        from vigia_detect.rag.advanced_rag_integration import AdvancedRAGOrchestrator
        
        # Test creaci√≥n de instancia
        orchestrator = AdvancedRAGOrchestrator()
        assert not orchestrator.is_initialized
        assert len(orchestrator.capabilities) == 4
        
        # Test capacidades esperadas
        expected_capabilities = [
            'multimodal_search',
            'dynamic_clustering', 
            'incremental_learning',
            'explainable_recommendations'
        ]
        
        for capability in expected_capabilities:
            assert capability in orchestrator.capabilities
        
        # Test m√©tricas iniciales
        assert orchestrator.metrics['total_queries_processed'] == 0
        assert orchestrator.metrics['multimodal_queries'] == 0
        
        print("‚úÖ Advanced RAG Integration b√°sico funcionando")
        
    except Exception as e:
        print(f"‚ùå Error en RAG integration b√°sico: {e}")
        pytest.fail(f"RAG integration basic test failed: {e}")


async def test_async_functionality():
    """Test funcionalidad as√≠ncrona b√°sica."""
    try:
        print("‚ö° Probando funcionalidad as√≠ncrona...")
        
        # Test funci√≥n factory as√≠ncrona
        from vigia_detect.rag.advanced_rag_integration import create_advanced_rag_orchestrator, AdvancedRAGOrchestrator
        
        # Crear orquestador (sin inicializaci√≥n completa)
        orchestrator = AdvancedRAGOrchestrator()
        
        # Test m√©todo as√≠ncrono b√°sico
        status = await orchestrator.get_orchestrator_status()
        assert isinstance(status, dict)
        assert 'is_initialized' in status
        
        print("‚úÖ Funcionalidad as√≠ncrona b√°sica funcionando")
        
    except Exception as e:
        print(f"‚ùå Error en funcionalidad as√≠ncrona: {e}")
        pytest.fail(f"Async functionality test failed: {e}")


def run_basic_rag_tests():
    """Ejecutar todas las pruebas b√°sicas de componentes RAG."""
    print("üß™ Iniciando pruebas b√°sicas de componentes RAG avanzados...\n")
    
    # Pruebas s√≠ncronas - now they use assertions instead of returning values
    test_incremental_training_basic()
    test_clustering_basic()
    test_explainability_basic()
    test_medclip_basic()
    test_advanced_rag_integration_basic()
    
    print("All basic RAG tests completed successfully")


async def run_async_tests():
    """Ejecutar pruebas as√≠ncronas."""
    print("\n‚ö° Ejecutando pruebas as√≠ncronas...")
    await test_async_functionality()
    print("Async tests completed successfully")


def main():
    """Funci√≥n principal."""
    try:
        # Pruebas s√≠ncronas
        run_basic_rag_tests()
        
        # Pruebas as√≠ncronas
        asyncio.run(run_async_tests())
        
        # Resumen de resultados
        print("\n" + "="*60)
        print("üìã RESUMEN DE PRUEBAS RAG B√ÅSICAS")
        print("="*60)
        print("‚úÖ Todas las pruebas RAG b√°sicas pasaron exitosamente!")
        print("üöÄ Componentes core implementados correctamente")
        print("üí° Sistema listo para pruebas de integraci√≥n completa")
        return True
        
    except Exception as e:
        print(f"\n‚ö†Ô∏è Error en pruebas RAG: {e}")
        print("üîß Algunos componentes necesitan ajustes")
        return False


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)