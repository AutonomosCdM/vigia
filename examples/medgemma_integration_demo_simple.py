#!/usr/bin/env python3
"""
Demo simplificado de integraci√≥n MedGemma en Vigia
Este demo muestra el funcionamiento b√°sico sin dependencias complejas.
"""

import asyncio
import sys
import os
from datetime import datetime
from pathlib import Path

# Agregar path del proyecto  
sys.path.append(str(Path(__file__).parent.parent))

# Importaciones m√≠nimas necesarias
import logging
logging.basicConfig(level=logging.INFO)


async def demo_medgemma_basic():
    """Demo b√°sico de MedGemma sin dependencias complejas"""
    print("üß† DEMO SIMPLIFICADO: MedGemma Integration")
    print("=" * 60)
    
    try:
        # Importar solo lo necesario
        from vigia_detect.ai.medgemma_client import MedGemmaClient, MedicalContext, MedicalAnalysisType
        
        print("‚úÖ MedGemma client importado correctamente")
        
        # Crear cliente
        client = MedGemmaClient()
        print("‚úÖ Cliente MedGemma inicializado")
        
        # Crear contexto m√©dico de prueba
        medical_context = MedicalContext(
            patient_age=75,
            medical_history=["diabetes", "hipertensi√≥n"],
            current_medications=["metformina", "losart√°n"],
            mobility_status="parcialmente_m√≥vil",
            risk_factors=["edad_avanzada", "diabetes", "movilidad_reducida"],
            previous_lpp_history=False
        )
        
        print("\nüìã Caso cl√≠nico de prueba:")
        print("   Paciente de 75 a√±os con diabetes e hipertensi√≥n")
        print("   Presenta lesi√≥n en regi√≥n sacra con signos de presi√≥n")
        
        # Observaciones cl√≠nicas
        clinical_observations = """
        Paciente de 75 a√±os con lesi√≥n en zona sacra. La lesi√≥n presenta:
        - Eritema no blanqueable de 4x3 cm
        - Piel intacta pero con cambio de coloraci√≥n
        - Dolor localizado al tacto (escala 4/10)
        - Zona caliente al tacto
        - Sin exudado ni mal olor
        El paciente pasa largos per√≠odos sentado debido a movilidad limitada.
        """
        
        print("\nüîÑ Analizando con MedGemma...")
        
        # Realizar an√°lisis de LPP
        result = await client.analyze_lpp_findings(
            clinical_observations=clinical_observations,
            medical_context=medical_context
        )
        
        if result:
            print("\n‚úÖ An√°lisis completado exitosamente:")
            print(f"   Confianza: {result.confidence_score:.2%}")
            print(f"   Nivel de riesgo: {result.risk_level}")
            print(f"   Seguimiento necesario: {'S√≠' if result.follow_up_needed else 'No'}")
            
            print("\nüìä Hallazgos cl√≠nicos:")
            for key, value in result.clinical_findings.items():
                if value:
                    print(f"   ‚Ä¢ {key}: {value}")
            
            print("\nüí° Recomendaciones:")
            for rec in result.recommendations[:3]:  # Mostrar solo las primeras 3
                print(f"   ‚Ä¢ {rec}")
                
        else:
            print("‚ùå No se pudo completar el an√°lisis")
            
    except ImportError as e:
        print(f"‚ùå Error de importaci√≥n: {e}")
        print("   Aseg√∫rate de tener configurado Google Generative AI")
    except Exception as e:
        print(f"‚ùå Error durante el demo: {e}")
        import traceback
        traceback.print_exc()


async def demo_triage_simple():
    """Demo simple de triage sin todas las dependencias"""
    print("\nüîç DEMO: An√°lisis de Triage M√©dico")
    print("=" * 60)
    
    try:
        from vigia_detect.ai.medgemma_client import MedGemmaClient
        
        client = MedGemmaClient()
        
        # Caso de urgencia para triage
        patient_message = """
        Doctora, mi madre de 82 a√±os tiene una herida en el tal√≥n que no mejora.
        Empez√≥ hace 2 semanas como una ampolla y ahora es una √∫lcera profunda.
        Est√° sangrando un poco y huele mal. Tiene diabetes desde hace 20 a√±os.
        ¬øDebo llevarla a urgencias o puedo esperar a la cita del lunes?
        """
        
        symptoms = "√ölcera en tal√≥n con mal olor, sangrado leve, paciente diab√©tica"
        
        print("üìã Mensaje del paciente recibido")
        print("üîÑ Realizando triage cl√≠nico...")
        
        result = await client.perform_clinical_triage(
            patient_message=patient_message,
            symptoms_description=symptoms
        )
        
        if result:
            findings = result.clinical_findings
            print(f"\n‚úÖ Triage completado:")
            print(f"   Nivel de urgencia: {findings.get('urgency_level', 'No determinado')}")
            print(f"   Confianza: {result.confidence_score:.2%}")
            
            if findings.get('alarm_signs'):
                print("\n‚ö†Ô∏è  Signos de alarma detectados:")
                for sign in findings['alarm_signs']:
                    print(f"   ‚Ä¢ {sign}")
            
            print(f"\nüè• Recomendaci√≥n: {findings.get('recommended_care_level', 'Evaluaci√≥n m√©dica')}")
            print(f"   Tiempo recomendado: Dentro de {findings.get('timeframe_hours', 24)} horas")
            
            if result.recommendations:
                print("\nüìã Acciones inmediatas:")
                for action in result.recommendations[:3]:
                    print(f"   ‚Ä¢ {action}")
                    
        else:
            print("‚ùå No se pudo completar el triage")
            
    except Exception as e:
        print(f"‚ùå Error en el triage: {e}")


async def demo_health_check():
    """Verificar estado del cliente MedGemma"""
    print("\nüè• HEALTH CHECK: MedGemma Service")
    print("=" * 60)
    
    try:
        from vigia_detect.ai.medgemma_client import MedGemmaClient
        from config.settings import get_settings
        
        settings = get_settings()
        
        print(f"üìã Configuraci√≥n actual:")
        print(f"   MedGemma habilitado: {getattr(settings, 'medgemma_enabled', False)}")
        print(f"   Modelo: {getattr(settings, 'medgemma_model', 'No configurado')}")
        print(f"   Google API Key: {'Configurada' if getattr(settings, 'google_api_key', None) else 'No configurada'}")
        
        client = MedGemmaClient()
        health = await client.health_check()
        
        print(f"\n‚úÖ Estado del servicio:")
        print(f"   Status: {health.get('status', 'unknown')}")
        print(f"   Modelo: {health.get('model', 'No disponible')}")
        print(f"   Timestamp: {health.get('timestamp', 'N/A')}")
        
        if health.get('status') == 'healthy':
            print("\nüéâ MedGemma est√° funcionando correctamente!")
        else:
            print(f"\n‚ö†Ô∏è  MedGemma presenta problemas: {health.get('error', 'Error desconocido')}")
            
    except Exception as e:
        print(f"‚ùå Error en health check: {e}")


async def main():
    """Funci√≥n principal del demo simplificado"""
    print("üè• VIGIA - DEMO MEDGEMMA SIMPLIFICADO")
    print("=" * 60)
    print("Este demo muestra la funcionalidad b√°sica de MedGemma")
    print("sin requerir todas las dependencias del sistema completo.\n")
    
    try:
        # Ejecutar demos en orden
        await demo_health_check()
        await demo_medgemma_basic()
        await demo_triage_simple()
        
        print("\n‚úÖ Demo completado exitosamente")
        print("\nüí° Para usar MedGemma en producci√≥n:")
        print("   1. Configura GOOGLE_API_KEY en tu archivo .env")
        print("   2. Establece MEDGEMMA_ENABLED=true")
        print("   3. Opcionalmente ajusta MEDGEMMA_MODEL (default: gemini-1.5-pro)")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Demo interrumpido por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error durante el demo: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())