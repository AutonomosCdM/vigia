#!/usr/bin/env python3
"""
Demo simple y funcional de AgentOps para Vigia LPP-Detect
"""

import os
import time
import uuid
from datetime import datetime
from vigia_detect.monitoring import AgentOpsClient

def main():
    """Demo simple pero completo de monitoreo m√©dico"""
    
    print("üè• DEMO AGENTOPS - VIGIA LPP-DETECT")
    print("=" * 50)
    
    # 1. Inicializar cliente AgentOps
    client = AgentOpsClient(
        api_key=os.getenv("AGENTOPS_API_KEY"),
        app_id="vigia-lpp-production",
        environment="production",
        enable_phi_protection=True,
        compliance_level="hipaa"
    )
    
    if not client.initialized:
        print("‚ùå Error: AgentOps no inicializado")
        return
    
    print("‚úÖ Cliente AgentOps inicializado")
    
    # 2. Crear caso m√©dico
    session_id = f"medical_session_{int(time.time())}"
    patient_context = {
        "patient_id": f"PAT_{uuid.uuid4().hex[:8].upper()}",
        "case_id": f"LPP_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
        "lpp_grade": 2,
        "anatomical_location": "sacrum",
        "risk_factors": ["diabetes", "limited_mobility"],
        "facility": "Hospital Regional"
    }
    
    print(f"üìã Caso m√©dico: {patient_context['case_id']}")
    
    # 3. Iniciar sesi√≥n m√©dica
    result = client.track_medical_session(
        session_id=session_id,
        patient_context=patient_context,
        session_type="lpp_analysis_complete_demo"
    )
    
    print(f"üîÑ Sesi√≥n m√©dica iniciada: {result}")
    
    # 4. Simular detecci√≥n LPP
    print("\nüîç AN√ÅLISIS DE IMAGEN M√âDICA...")
    time.sleep(2)
    
    detection_results = {
        "lpp_grade": 2,
        "confidence": 0.89,
        "anatomical_location": "sacrum",
        "area_cm2": 3.2,
        "model": "YOLOv5_medical_v2.1",
        "processing_time_ms": 2300
    }
    
    client.track_lpp_detection(
        session_id=session_id,
        image_path="/medical_images/pressure_ulcer_sacrum_001.jpg",
        detection_results=detection_results,
        confidence=0.89,
        lpp_grade=2
    )
    
    print(f"‚úÖ LPP detectado: Grado {detection_results['lpp_grade']} (89% confianza)")
    
    # 5. Interacci√≥n con agente m√©dico
    print("\nü§ñ AGENTE M√âDICO ADK...")
    time.sleep(1)
    
    client.track_agent_interaction(
        agent_name="medical_decision_engine",
        action="recommend_treatment",
        input_data={
            "lpp_grade": 2,
            "patient_risk_factors": ["diabetes", "limited_mobility"],
            "evidence_guidelines": "NPUAP_EPUAP_2019"
        },
        output_data={
            "treatment_protocol": "Stage_2_LPP_Management",
            "evidence_level": "A",
            "monitoring_frequency": "daily",
            "specialist_referral": False
        },
        execution_time=1.2,
        success=True
    )
    
    print("‚úÖ Recomendaci√≥n m√©dica generada por agente ADK")
    
    # 6. Tarea as√≠ncrona
    print("\n‚ö° PIPELINE AS√çNCRONO...")
    
    client.track_async_task(
        task_id=f"celery_{uuid.uuid4().hex[:12]}",
        task_type="medical_report_generation",
        queue="medical_priority",
        status="success",
        metadata={
            "patient_case": patient_context['case_id'],
            "report_type": "lpp_analysis_complete",
            "processing_time": 45
        }
    )
    
    print("‚úÖ Reporte m√©dico generado v√≠a Celery")
    
    # 7. Escalaci√≥n m√©dica
    print("\n‚ö†Ô∏è  ESCALACI√ìN M√âDICA...")
    
    client.track_medical_error(
        error_type="complex_case_review",
        error_message="Caso con m√∫ltiples factores de riesgo requiere revisi√≥n especializada",
        context={
            "patient_case": patient_context['case_id'],
            "risk_score": 0.78,
            "complexity_factors": ["diabetes", "age_75+", "immobility"]
        },
        severity="medium",
        requires_escalation=True
    )
    
    print("‚úÖ Escalaci√≥n registrada para revisi√≥n humana")
    
    # 8. Finalizar
    print("\nüìä FINALIZANDO SESI√ìN...")
    time.sleep(1)
    
    client.end_session(session_id)
    
    print("\nüéØ DEMO COMPLETADO!")
    print("=" * 30)
    print(f"üìã Caso: {patient_context['case_id']}")
    print("üîç Eventos enviados a AgentOps:")
    print("  ‚Ä¢ Sesi√≥n m√©dica iniciada")
    print("  ‚Ä¢ Detecci√≥n LPP (Grado 2)")
    print("  ‚Ä¢ Decisi√≥n m√©dica (ADK Agent)")
    print("  ‚Ä¢ Tarea as√≠ncrona (Celery)")
    print("  ‚Ä¢ Escalaci√≥n m√©dica")
    print("  ‚Ä¢ Sesi√≥n finalizada")
    
    print("\nüìà REVISA EL DASHBOARD AGENTOPS:")
    print("üîó https://app.agentops.ai/projects")
    print("‚úÖ Sistema de monitoreo m√©dico operativo!")


if __name__ == "__main__":
    main()