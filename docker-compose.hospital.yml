# Vigia Hospital-Grade Docker Compose
# Production-ready deployment for medical facilities
# Compliance: HIPAA, ISO 13485, SOC2

version: '3.8'

services:
  # ==================================================
  # LAYER 1: INPUT ISOLATION (Zero Medical Knowledge)
  # ==================================================
  
  # PostgreSQL Database (Medical-Grade)
  vigia-postgres:
    image: postgres:15-alpine
    container_name: vigia-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: vigia_medical
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C --data-checksums"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./docker/postgres/backup.sh:/usr/local/bin/backup.sh:ro
    networks:
      - medical_data
      - internal
    secrets:
      - postgres_user
      - postgres_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
      - DAC_OVERRIDE
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    
  # Redis Cache (Medical Protocols)
  vigia-redis:
    image: redis:7-alpine
    container_name: vigia-redis
    restart: unless-stopped
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --requirepass-file /run/secrets/redis_password
    volumes:
      - redis_data:/data
    networks:
      - internal
    secrets:
      - redis_password
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "$$(cat /run/secrets/redis_password)", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    tmpfs:
      - /tmp:noexec,nosuid,size=50m

  # ==================================================
  # LAYER 2: MEDICAL ORCHESTRATION
  # ==================================================
  
  # Celery Worker (Medical Tasks)
  vigia-celery-worker:
    build:
      context: .
      dockerfile: docker/celery/worker.dockerfile
    container_name: vigia-celery-worker
    restart: unless-stopped
    environment:
      CELERY_BROKER_URL: redis://:$$(cat /run/secrets/redis_password)@vigia-redis:6379/0
      CELERY_RESULT_BACKEND: redis://:$$(cat /run/secrets/redis_password)@vigia-redis:6379/1
      DATABASE_URL: postgresql://$$(cat /run/secrets/postgres_user):$$(cat /run/secrets/postgres_password)@vigia-postgres:5432/vigia_medical
      ENVIRONMENT: hospital
      MEDICAL_COMPLIANCE_LEVEL: hipaa
      PHI_PROTECTION_ENABLED: true
    volumes:
      - medical_models:/app/models:ro
      - medical_images:/app/data/images
      - audit_logs:/app/logs
    networks:
      - internal
      - medical_data
    secrets:
      - redis_password
      - postgres_user
      - postgres_password
      - encryption_key
    depends_on:
      vigia-redis:
        condition: service_healthy
      vigia-postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "celery", "-A", "vigia_detect.tasks", "inspect", "ping"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "1000:1000"
    
  # Celery Beat Scheduler
  vigia-celery-beat:
    build:
      context: .
      dockerfile: docker/celery/beat.dockerfile
    container_name: vigia-celery-beat
    restart: unless-stopped
    environment:
      CELERY_BROKER_URL: redis://:$$(cat /run/secrets/redis_password)@vigia-redis:6379/0
      DATABASE_URL: postgresql://$$(cat /run/secrets/postgres_user):$$(cat /run/secrets/postgres_password)@vigia-postgres:5432/vigia_medical
      ENVIRONMENT: hospital
    volumes:
      - celery_beat_data:/app/beat
      - audit_logs:/app/logs
    networks:
      - internal
    secrets:
      - redis_password
      - postgres_user
      - postgres_password
    depends_on:
      vigia-redis:
        condition: service_healthy
      vigia-postgres:
        condition: service_healthy
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "1000:1000"

  # ==================================================
  # LAYER 3: SPECIALIZED MEDICAL SYSTEMS
  # ==================================================
  
  # Main Vigia Detection Service
  vigia-detection:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: vigia-detection
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://$$(cat /run/secrets/postgres_user):$$(cat /run/secrets/postgres_password)@vigia-postgres:5432/vigia_medical
      REDIS_URL: redis://:$$(cat /run/secrets/redis_password)@vigia-redis:6379/0
      ENVIRONMENT: hospital
      MEDICAL_COMPLIANCE_LEVEL: hipaa
      PHI_PROTECTION_ENABLED: true
      AGENTOPS_API_KEY_FILE: /run/secrets/agentops_api_key
    volumes:
      - medical_models:/app/models
      - medical_images:/app/data/images
      - audit_logs:/app/logs
    networks:
      - internal
      - medical_data
    secrets:
      - postgres_user
      - postgres_password
      - redis_password
      - encryption_key
      - agentops_api_key
      - jwt_secret
    depends_on:
      vigia-postgres:
        condition: service_healthy
      vigia-redis:
        condition: service_healthy
      vigia-celery-worker:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=200m
      - /app/tmp:noexec,nosuid,size=100m

  # WhatsApp Bot (Input Isolation)
  vigia-whatsapp:
    build:
      context: .
      dockerfile: Dockerfile
      target: whatsapp-bot
    container_name: vigia-whatsapp
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      TWILIO_ACCOUNT_SID_FILE: /run/secrets/twilio_sid
      TWILIO_AUTH_TOKEN_FILE: /run/secrets/twilio_token
      ENVIRONMENT: hospital
    volumes:
      - audit_logs:/app/logs
    networks:
      - dmz
      - internal
    secrets:
      - twilio_sid
      - twilio_token
    depends_on:
      vigia-detection:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m

  # Slack Orchestrator (Medical Notifications)
  vigia-slack:
    build:
      context: .
      dockerfile: Dockerfile
      target: slack-bot
    container_name: vigia-slack
    restart: unless-stopped
    environment:
      SLACK_BOT_TOKEN_FILE: /run/secrets/slack_token
      SLACK_SIGNING_SECRET_FILE: /run/secrets/slack_signing
      ENVIRONMENT: hospital
    volumes:
      - audit_logs:/app/logs
    networks:
      - internal
      - management
    secrets:
      - slack_token
      - slack_signing
    depends_on:
      vigia-detection:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m

  # ==================================================
  # REVERSE PROXY & SECURITY
  # ==================================================
  
  # NGINX Reverse Proxy
  vigia-nginx:
    image: nginx:alpine
    container_name: vigia-nginx
    restart: unless-stopped
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ssl_certs:/etc/nginx/ssl:ro
      - ./docker/nginx/modsecurity:/etc/nginx/modsecurity:ro
    networks:
      - dmz
      - internal
    secrets:
      - ssl_cert
      - ssl_key
    depends_on:
      - vigia-detection
      - vigia-whatsapp
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID

  # ==================================================
  # MONITORING & OBSERVABILITY
  # ==================================================
  
  # Flower (Celery Monitoring)
  vigia-flower:
    build:
      context: .
      dockerfile: docker/celery/flower.dockerfile
    container_name: vigia-flower
    restart: unless-stopped
    ports:
      - "5555:5555"
    environment:
      CELERY_BROKER_URL: redis://:$$(cat /run/secrets/redis_password)@vigia-redis:6379/0
      FLOWER_BASIC_AUTH_FILE: /run/secrets/flower_auth
    networks:
      - management
      - internal
    secrets:
      - redis_password
      - flower_auth
    depends_on:
      vigia-redis:
        condition: service_healthy
      vigia-celery-worker:
        condition: service_healthy
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "1000:1000"

  # Prometheus Metrics
  vigia-prometheus:
    image: prom/prometheus:latest
    container_name: vigia-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - management
      - internal
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "1000:1000"

  # Grafana Dashboards
  vigia-grafana:
    image: grafana/grafana:latest
    container_name: vigia-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD_FILE: /run/secrets/grafana_password
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_ALLOW_EMBEDDING: false
      GF_SECURITY_COOKIE_SECURE: true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - management
    secrets:
      - grafana_password
    depends_on:
      - vigia-prometheus
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "1000:1000"

  # ==================================================
  # BACKUP & RECOVERY
  # ==================================================
  
  # Automated Backup Service
  vigia-backup:
    build:
      context: .
      dockerfile: docker/backup/backup.dockerfile
    container_name: vigia-backup
    restart: unless-stopped
    environment:
      POSTGRES_HOST: vigia-postgres
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_DB: vigia_medical
      BACKUP_SCHEDULE: "0 */6 * * *"  # Every 6 hours
      BACKUP_ENCRYPTION_KEY_FILE: /run/secrets/backup_encryption_key
    volumes:
      - backup_data:/backups
      - medical_images:/app/data/images:ro
      - audit_logs:/app/logs:ro
    networks:
      - internal
    secrets:
      - postgres_user
      - postgres_password
      - backup_encryption_key
    depends_on:
      vigia-postgres:
        condition: service_healthy
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "1000:1000"

# ==================================================
# DOCKER SECRETS (Hospital Credentials)
# ==================================================
secrets:
  postgres_user:
    external: true
  postgres_password:
    external: true
  redis_password:
    external: true
  encryption_key:
    external: true
  jwt_secret:
    external: true
  ssl_cert:
    external: true
  ssl_key:
    external: true
  twilio_sid:
    external: true
  twilio_token:
    external: true
  slack_token:
    external: true
  slack_signing:
    external: true
  agentops_api_key:
    external: true
  flower_auth:
    external: true
  grafana_password:
    external: true
  backup_encryption_key:
    external: true

# ==================================================
# PERSISTENT VOLUMES (Encrypted Storage)
# ==================================================
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/vigia/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/vigia/redis
  medical_models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/vigia/models
  medical_images:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/vigia/images
  audit_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/vigia/audit
  celery_beat_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  backup_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/vigia/backups
  ssl_certs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /etc/vigia/ssl

# ==================================================
# NETWORK SEGMENTATION (Medical-Grade)
# ==================================================
networks:
  medical_data:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: vigia-medical
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24
          gateway: 172.20.0.1
    labels:
      - "vigia.network.type=medical_data"
      - "vigia.compliance=hipaa"
  
  internal:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: vigia-internal
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/24
          gateway: 172.21.0.1
    labels:
      - "vigia.network.type=internal"
  
  management:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: vigia-mgmt
    ipam:
      driver: default
      config:
        - subnet: 172.22.0.0/24
          gateway: 172.22.0.1
    labels:
      - "vigia.network.type=management"
  
  dmz:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: vigia-dmz
    ipam:
      driver: default
      config:
        - subnet: 172.23.0.0/24
          gateway: 172.23.0.1
    labels:
      - "vigia.network.type=dmz"
      - "vigia.exposure=external"