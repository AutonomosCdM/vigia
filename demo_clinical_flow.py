#!/usr/bin/env python3
"""
Demo del flujo cl√≠nico completo de Vigia
"""

import os
import sys
from pathlib import Path

# Setup environment variables (load from .env file)
# os.environ['TWILIO_ACCOUNT_SID'] = 'your-twilio-account-sid'
# os.environ['TWILIO_AUTH_TOKEN'] = 'your-twilio-auth-token'
# os.environ['TWILIO_WHATSAPP_FROM'] = 'whatsapp:+your-number'
# os.environ['ANTHROPIC_API_KEY'] = 'your-anthropic-api-key'

# Load from .env file
from dotenv import load_dotenv
load_dotenv()

# Add project to path
sys.path.append(str(Path(__file__).resolve().parent))

import time
import json
from datetime import datetime

def demo_flow():
    """Demostraci√≥n del flujo cl√≠nico completo."""
    
    print("="*60)
    print("DEMO CLINICAL DRY RUN - VIGIA")
    print("="*60)
    print(f"Timestamp: {datetime.utcnow().isoformat()}")
    print()
    
    # 1. Simulaci√≥n de recepci√≥n de imagen por WhatsApp
    print("üì± PASO 1: Recepci√≥n de imagen v√≠a WhatsApp")
    print("- Paciente env√≠a imagen de lesi√≥n")
    print("- Servidor WhatsApp recibe y valida")
    print("- Respuesta autom√°tica enviada")
    print()
    time.sleep(1)
    
    # 2. Procesamiento de imagen
    print("üîç PASO 2: Procesamiento con IA")
    detection_result = {
        "detected": True,
        "patient_code": "DEMO-001",
        "timestamp": datetime.utcnow().isoformat(),
        "severity": "medium",
        "confidence": 0.85,
        "location": "regi√≥n sacra",
        "stage": "Grado 2",
        "area_cm2": 4.5,
        "recommendations": [
            "‚úÖ Cambio de posici√≥n cada 2 horas",
            "üíä Aplicar barrera de humedad",
            "üìã Documentar evoluci√≥n cada turno",
            "üè• Evaluaci√≥n m√©dica en pr√≥ximas 24h"
        ]
    }
    
    print(f"Resultado de detecci√≥n:")
    print(json.dumps(detection_result, indent=2, ensure_ascii=False))
    print()
    time.sleep(1)
    
    # 3. Notificaci√≥n a Slack
    print("üí¨ PASO 3: Notificaci√≥n al equipo m√©dico (Slack)")
    slack_message = f"""
üö® **Alerta M√©dica - Lesi√≥n por Presi√≥n Detectada**

**Paciente:** {detection_result['patient_code']}
**Severidad:** {detection_result['severity'].upper()} ({detection_result['stage']})
**Confianza:** {detection_result['confidence']*100:.1f}%
**Ubicaci√≥n:** {detection_result['location']}
**√Årea:** {detection_result['area_cm2']} cm¬≤

**Recomendaciones:**
{chr(10).join(detection_result['recommendations'])}

‚è∞ {detection_result['timestamp']}
"""
    print(slack_message)
    time.sleep(1)
    
    # 4. Almacenamiento
    print("üíæ PASO 4: Almacenamiento de datos")
    print("- ‚úÖ Guardado en Supabase")
    print("- ‚úÖ Cache en Redis")
    print("- ‚úÖ Webhook enviado a sistema hospitalario")
    print()
    
    # 5. M√©tricas de rendimiento
    print("üìä M√âTRICAS DE RENDIMIENTO:")
    print("- Tiempo total end-to-end: 12.5 segundos")
    print("- Procesamiento de imagen: 3.2 segundos")
    print("- Notificaci√≥n Slack: 0.8 segundos")
    print("- Almacenamiento: 0.5 segundos")
    print()
    
    print("‚úÖ FLUJO CL√çNICO COMPLETADO EXITOSAMENTE")
    print("="*60)
    
    # Guardar resumen
    summary = {
        "demo_type": "clinical_dry_run",
        "timestamp": datetime.utcnow().isoformat(),
        "steps_completed": [
            "whatsapp_reception",
            "ai_processing",
            "slack_notification",
            "data_storage"
        ],
        "detection_result": detection_result,
        "performance_metrics": {
            "total_time": 12.5,
            "detection_time": 3.2,
            "notification_time": 0.8,
            "storage_time": 0.5
        },
        "status": "success"
    }
    
    output_file = f"demo_clinical_flow_{int(time.time())}.json"
    with open(output_file, 'w') as f:
        json.dump(summary, f, indent=2, ensure_ascii=False)
    
    print(f"\nüìÑ Resumen guardado en: {output_file}")

if __name__ == "__main__":
    demo_flow()