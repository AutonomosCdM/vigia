version: '3.8'

services:
  # Main Vigia detection service
  vigia:
    build: .
    container_name: vigia-detector-staging
    environment:
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - WEBHOOK_ENABLED=${WEBHOOK_ENABLED:-false}
      - WEBHOOK_URL=${WEBHOOK_URL}
      - WEBHOOK_API_KEY=${WEBHOOK_API_KEY}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - LOG_LEVEL=${LOG_LEVEL:-DEBUG}
      - ENVIRONMENT=staging
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_PER_MINUTE=30
    volumes:
      - ./data/input:/app/data/input:ro
      - ./data/output:/app/data/output
      - ./logs:/app/logs
    depends_on:
      - redis
    networks:
      - vigia-staging-network
    restart: unless-stopped

  # WhatsApp bot service with rate limiting
  whatsapp:
    build: .
    container_name: vigia-whatsapp-staging
    command: ["python", "-m", "vigia_detect.messaging.whatsapp.server"]
    environment:
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_WHATSAPP_FROM=${TWILIO_WHATSAPP_FROM}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - ENVIRONMENT=staging
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_PER_MINUTE=30
    ports:
      - "5001:5000"  # Different port for staging
    depends_on:
      - redis
    networks:
      - vigia-staging-network
    restart: unless-stopped

  # Slack bot service
  slack:
    build: .
    container_name: vigia-slack-staging
    command: ["python", "apps/slack_server.py"]
    environment:
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - SLACK_APP_TOKEN=${SLACK_APP_TOKEN}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - ENVIRONMENT=staging
    depends_on:
      - redis
    networks:
      - vigia-staging-network
    restart: unless-stopped

  # Webhook server with rate limiting
  webhook-server:
    build: .
    container_name: vigia-webhook-staging
    command: ["python", "-m", "vigia_detect.webhook.server"]
    environment:
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - ENVIRONMENT=staging
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_PER_MINUTE=60
    ports:
      - "8001:8000"  # Different port for staging
    depends_on:
      - redis
    networks:
      - vigia-staging-network
    restart: unless-stopped

  # Redis cache with limited configuration
  redis:
    image: redis:7-alpine
    container_name: vigia-redis-staging
    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru --save 60 1000
    volumes:
      - redis-staging-data:/data
    ports:
      - "6380:6379"  # Different port for staging
    networks:
      - vigia-staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: vigia-prometheus-staging
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-staging-data:/prometheus
    ports:
      - "9091:9090"  # Different port for staging
    networks:
      - vigia-staging-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: vigia-grafana-staging
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-staging123}
      - GF_SERVER_ROOT_URL=http://localhost:3001
    volumes:
      - grafana-staging-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    ports:
      - "3001:3000"  # Different port for staging
    networks:
      - vigia-staging-network
    restart: unless-stopped

volumes:
  redis-staging-data:
  prometheus-staging-data:
  grafana-staging-data:

networks:
  vigia-staging-network:
    driver: bridge